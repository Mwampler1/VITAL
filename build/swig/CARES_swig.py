# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CARES_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CARES_swig')
    _CARES_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CARES_swig', [dirname(__file__)])
        except ImportError:
            import _CARES_swig
            return _CARES_swig
        try:
            _mod = imp.load_module('_CARES_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CARES_swig = swig_import_helper()
    del swig_import_helper
else:
    import _CARES_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now() -> "gr::high_res_timer_type":
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _CARES_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _CARES_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _CARES_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _CARES_swig.high_res_timer_epoch()
class find_local_max(object):
    """
    Finds a given number of local maxima in a vector.

    This block takes a vector of size (vector-length x 1) as input and outputs a float vector of size (number of max. values x 1) consisting of max. values and a float vector of size (number of max. values x 1) consisting of their locations.

    Constructor Specific Documentation:

    Make a block to find the local maxima and their locations.

    Args:
        num_max_vals : Number of max. values
        vector_len : Length of the input vector
        x_min : Min. value of the index vector
        x_max : Max. value of the index vector
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_max_vals: 'int', vector_len: 'int', x_min: 'float', x_max: 'float') -> "gr::CARES::find_local_max::sptr":
        """
        make(int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr

        Finds a given number of local maxima in a vector.

        This block takes a vector of size (vector-length x 1) as input and outputs a float vector of size (number of max. values x 1) consisting of max. values and a float vector of size (number of max. values x 1) consisting of their locations.

        Constructor Specific Documentation:

        Make a block to find the local maxima and their locations.

        Args:
            num_max_vals : Number of max. values
            vector_len : Length of the input vector
            x_min : Min. value of the index vector
            x_max : Max. value of the index vector
        """
        return _CARES_swig.find_local_max_make(num_max_vals, vector_len, x_min, x_max)

    make = staticmethod(make)
    __swig_destroy__ = _CARES_swig.delete_find_local_max
    __del__ = lambda self: None
find_local_max_swigregister = _CARES_swig.find_local_max_swigregister
find_local_max_swigregister(find_local_max)

def find_local_max_make(num_max_vals: 'int', vector_len: 'int', x_min: 'float', x_max: 'float') -> "gr::CARES::find_local_max::sptr":
    """
    find_local_max_make(int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr

    Finds a given number of local maxima in a vector.

    This block takes a vector of size (vector-length x 1) as input and outputs a float vector of size (number of max. values x 1) consisting of max. values and a float vector of size (number of max. values x 1) consisting of their locations.

    Constructor Specific Documentation:

    Make a block to find the local maxima and their locations.

    Args:
        num_max_vals : Number of max. values
        vector_len : Length of the input vector
        x_min : Min. value of the index vector
        x_max : Max. value of the index vector
    """
    return _CARES_swig.find_local_max_make(num_max_vals, vector_len, x_min, x_max)

class find_local_max_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::CARES::find_local_max)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::CARES::find_local_max)> self) -> find_local_max_sptr
        __init__(boost::shared_ptr<(gr::CARES::find_local_max)> self, find_local_max p) -> find_local_max_sptr
        """
        this = _CARES_swig.new_find_local_max_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::CARES::find_local_max *":
        """__deref__(find_local_max_sptr self) -> find_local_max"""
        return _CARES_swig.find_local_max_sptr___deref__(self)

    __swig_destroy__ = _CARES_swig.delete_find_local_max_sptr
    __del__ = lambda self: None

    def make(self, num_max_vals: 'int', vector_len: 'int', x_min: 'float', x_max: 'float') -> "gr::CARES::find_local_max::sptr":
        """
        make(find_local_max_sptr self, int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr

        Finds a given number of local maxima in a vector.

        This block takes a vector of size (vector-length x 1) as input and outputs a float vector of size (number of max. values x 1) consisting of max. values and a float vector of size (number of max. values x 1) consisting of their locations.

        Constructor Specific Documentation:

        Make a block to find the local maxima and their locations.

        Args:
            num_max_vals : Number of max. values
            vector_len : Length of the input vector
            x_min : Min. value of the index vector
            x_max : Max. value of the index vector
        """
        return _CARES_swig.find_local_max_sptr_make(self, num_max_vals, vector_len, x_min, x_max)


    def history(self) -> "unsigned int":
        """history(find_local_max_sptr self) -> unsigned int"""
        return _CARES_swig.find_local_max_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(find_local_max_sptr self, int which, int delay)
        declare_sample_delay(find_local_max_sptr self, unsigned int delay)
        """
        return _CARES_swig.find_local_max_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(find_local_max_sptr self, int which) -> unsigned int"""
        return _CARES_swig.find_local_max_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(find_local_max_sptr self, int multiple)"""
        return _CARES_swig.find_local_max_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(find_local_max_sptr self) -> int"""
        return _CARES_swig.find_local_max_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(find_local_max_sptr self) -> double"""
        return _CARES_swig.find_local_max_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(find_local_max_sptr self) -> uint64_t"""
        return _CARES_swig.find_local_max_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(find_local_max_sptr self) -> uint64_t"""
        return _CARES_swig.find_local_max_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(find_local_max_sptr self) -> bool"""
        return _CARES_swig.find_local_max_sptr_start(self)


    def stop(self) -> "bool":
        """stop(find_local_max_sptr self) -> bool"""
        return _CARES_swig.find_local_max_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(find_local_max_sptr self, unsigned int which_input) -> uint64_t"""
        return _CARES_swig.find_local_max_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(find_local_max_sptr self, unsigned int which_output) -> uint64_t"""
        return _CARES_swig.find_local_max_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(find_local_max_sptr self, std::string level)"""
        return _CARES_swig.find_local_max_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(find_local_max_sptr self) -> std::string"""
        return _CARES_swig.find_local_max_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(find_local_max_sptr self) -> int"""
        return _CARES_swig.find_local_max_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(find_local_max_sptr self, int m)"""
        return _CARES_swig.find_local_max_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(find_local_max_sptr self)"""
        return _CARES_swig.find_local_max_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(find_local_max_sptr self) -> bool"""
        return _CARES_swig.find_local_max_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(find_local_max_sptr self, int m)"""
        return _CARES_swig.find_local_max_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(find_local_max_sptr self) -> int"""
        return _CARES_swig.find_local_max_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(find_local_max_sptr self, int i) -> long"""
        return _CARES_swig.find_local_max_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(find_local_max_sptr self, long max_output_buffer)
        set_max_output_buffer(find_local_max_sptr self, int port, long max_output_buffer)
        """
        return _CARES_swig.find_local_max_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(find_local_max_sptr self, int i) -> long"""
        return _CARES_swig.find_local_max_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(find_local_max_sptr self, long min_output_buffer)
        set_min_output_buffer(find_local_max_sptr self, int port, long min_output_buffer)
        """
        return _CARES_swig.find_local_max_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full_avg(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full_var(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full_avg(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full_var(find_local_max_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.find_local_max_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(find_local_max_sptr self) -> float"""
        return _CARES_swig.find_local_max_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(find_local_max_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _CARES_swig.find_local_max_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(find_local_max_sptr self)"""
        return _CARES_swig.find_local_max_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(find_local_max_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _CARES_swig.find_local_max_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(find_local_max_sptr self) -> int"""
        return _CARES_swig.find_local_max_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(find_local_max_sptr self) -> int"""
        return _CARES_swig.find_local_max_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(find_local_max_sptr self, int priority) -> int"""
        return _CARES_swig.find_local_max_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(find_local_max_sptr self) -> std::string"""
        return _CARES_swig.find_local_max_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(find_local_max_sptr self) -> std::string"""
        return _CARES_swig.find_local_max_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(find_local_max_sptr self) -> io_signature_sptr"""
        return _CARES_swig.find_local_max_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(find_local_max_sptr self) -> io_signature_sptr"""
        return _CARES_swig.find_local_max_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(find_local_max_sptr self) -> long"""
        return _CARES_swig.find_local_max_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(find_local_max_sptr self) -> basic_block_sptr"""
        return _CARES_swig.find_local_max_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(find_local_max_sptr self, int ninputs, int noutputs) -> bool"""
        return _CARES_swig.find_local_max_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(find_local_max_sptr self) -> std::string"""
        return _CARES_swig.find_local_max_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(find_local_max_sptr self, std::string name)"""
        return _CARES_swig.find_local_max_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(find_local_max_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _CARES_swig.find_local_max_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(find_local_max_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.find_local_max_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(find_local_max_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.find_local_max_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(find_local_max_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _CARES_swig.find_local_max_sptr_message_subscribers(self, which_port)

find_local_max_sptr_swigregister = _CARES_swig.find_local_max_sptr_swigregister
find_local_max_sptr_swigregister(find_local_max_sptr)


find_local_max_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
find_local_max = find_local_max.make;

class antenna_correction(object):
    """
    Performs a scaling operation on a correlation matrix.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and multiplies it with a diagonal matrix of size (number of antenna elements x number of antenna elements) using calibration values retrieved from a config file.

    Constructor Specific Documentation:

    Make a block to correct a correlation matrix for non-uniform antenna gain and phase.

    Args:
        num_ant_ele : Number of antenna elements
        config_filename : Config file consisting of antenna calibration values
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_ant_ele: 'int', config_filename: 'char *') -> "gr::CARES::antenna_correction::sptr":
        """
        make(int num_ant_ele, char * config_filename) -> antenna_correction_sptr

        Performs a scaling operation on a correlation matrix.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and multiplies it with a diagonal matrix of size (number of antenna elements x number of antenna elements) using calibration values retrieved from a config file.

        Constructor Specific Documentation:

        Make a block to correct a correlation matrix for non-uniform antenna gain and phase.

        Args:
            num_ant_ele : Number of antenna elements
            config_filename : Config file consisting of antenna calibration values
        """
        return _CARES_swig.antenna_correction_make(num_ant_ele, config_filename)

    make = staticmethod(make)
    __swig_destroy__ = _CARES_swig.delete_antenna_correction
    __del__ = lambda self: None
antenna_correction_swigregister = _CARES_swig.antenna_correction_swigregister
antenna_correction_swigregister(antenna_correction)

def antenna_correction_make(num_ant_ele: 'int', config_filename: 'char *') -> "gr::CARES::antenna_correction::sptr":
    """
    antenna_correction_make(int num_ant_ele, char * config_filename) -> antenna_correction_sptr

    Performs a scaling operation on a correlation matrix.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and multiplies it with a diagonal matrix of size (number of antenna elements x number of antenna elements) using calibration values retrieved from a config file.

    Constructor Specific Documentation:

    Make a block to correct a correlation matrix for non-uniform antenna gain and phase.

    Args:
        num_ant_ele : Number of antenna elements
        config_filename : Config file consisting of antenna calibration values
    """
    return _CARES_swig.antenna_correction_make(num_ant_ele, config_filename)

class antenna_correction_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::CARES::antenna_correction)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::CARES::antenna_correction)> self) -> antenna_correction_sptr
        __init__(boost::shared_ptr<(gr::CARES::antenna_correction)> self, antenna_correction p) -> antenna_correction_sptr
        """
        this = _CARES_swig.new_antenna_correction_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::CARES::antenna_correction *":
        """__deref__(antenna_correction_sptr self) -> antenna_correction"""
        return _CARES_swig.antenna_correction_sptr___deref__(self)

    __swig_destroy__ = _CARES_swig.delete_antenna_correction_sptr
    __del__ = lambda self: None

    def make(self, num_ant_ele: 'int', config_filename: 'char *') -> "gr::CARES::antenna_correction::sptr":
        """
        make(antenna_correction_sptr self, int num_ant_ele, char * config_filename) -> antenna_correction_sptr

        Performs a scaling operation on a correlation matrix.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and multiplies it with a diagonal matrix of size (number of antenna elements x number of antenna elements) using calibration values retrieved from a config file.

        Constructor Specific Documentation:

        Make a block to correct a correlation matrix for non-uniform antenna gain and phase.

        Args:
            num_ant_ele : Number of antenna elements
            config_filename : Config file consisting of antenna calibration values
        """
        return _CARES_swig.antenna_correction_sptr_make(self, num_ant_ele, config_filename)


    def history(self) -> "unsigned int":
        """history(antenna_correction_sptr self) -> unsigned int"""
        return _CARES_swig.antenna_correction_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(antenna_correction_sptr self, int which, int delay)
        declare_sample_delay(antenna_correction_sptr self, unsigned int delay)
        """
        return _CARES_swig.antenna_correction_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(antenna_correction_sptr self, int which) -> unsigned int"""
        return _CARES_swig.antenna_correction_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(antenna_correction_sptr self, int multiple)"""
        return _CARES_swig.antenna_correction_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(antenna_correction_sptr self) -> int"""
        return _CARES_swig.antenna_correction_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(antenna_correction_sptr self) -> double"""
        return _CARES_swig.antenna_correction_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(antenna_correction_sptr self) -> uint64_t"""
        return _CARES_swig.antenna_correction_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(antenna_correction_sptr self) -> uint64_t"""
        return _CARES_swig.antenna_correction_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(antenna_correction_sptr self) -> bool"""
        return _CARES_swig.antenna_correction_sptr_start(self)


    def stop(self) -> "bool":
        """stop(antenna_correction_sptr self) -> bool"""
        return _CARES_swig.antenna_correction_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(antenna_correction_sptr self, unsigned int which_input) -> uint64_t"""
        return _CARES_swig.antenna_correction_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(antenna_correction_sptr self, unsigned int which_output) -> uint64_t"""
        return _CARES_swig.antenna_correction_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(antenna_correction_sptr self, std::string level)"""
        return _CARES_swig.antenna_correction_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(antenna_correction_sptr self) -> std::string"""
        return _CARES_swig.antenna_correction_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(antenna_correction_sptr self) -> int"""
        return _CARES_swig.antenna_correction_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(antenna_correction_sptr self, int m)"""
        return _CARES_swig.antenna_correction_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(antenna_correction_sptr self)"""
        return _CARES_swig.antenna_correction_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(antenna_correction_sptr self) -> bool"""
        return _CARES_swig.antenna_correction_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(antenna_correction_sptr self, int m)"""
        return _CARES_swig.antenna_correction_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(antenna_correction_sptr self) -> int"""
        return _CARES_swig.antenna_correction_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(antenna_correction_sptr self, int i) -> long"""
        return _CARES_swig.antenna_correction_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(antenna_correction_sptr self, long max_output_buffer)
        set_max_output_buffer(antenna_correction_sptr self, int port, long max_output_buffer)
        """
        return _CARES_swig.antenna_correction_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(antenna_correction_sptr self, int i) -> long"""
        return _CARES_swig.antenna_correction_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(antenna_correction_sptr self, long min_output_buffer)
        set_min_output_buffer(antenna_correction_sptr self, int port, long min_output_buffer)
        """
        return _CARES_swig.antenna_correction_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full_avg(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full_var(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full_avg(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full_var(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.antenna_correction_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(antenna_correction_sptr self) -> float"""
        return _CARES_swig.antenna_correction_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(antenna_correction_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _CARES_swig.antenna_correction_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(antenna_correction_sptr self)"""
        return _CARES_swig.antenna_correction_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(antenna_correction_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _CARES_swig.antenna_correction_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(antenna_correction_sptr self) -> int"""
        return _CARES_swig.antenna_correction_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(antenna_correction_sptr self) -> int"""
        return _CARES_swig.antenna_correction_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(antenna_correction_sptr self, int priority) -> int"""
        return _CARES_swig.antenna_correction_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(antenna_correction_sptr self) -> std::string"""
        return _CARES_swig.antenna_correction_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(antenna_correction_sptr self) -> std::string"""
        return _CARES_swig.antenna_correction_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(antenna_correction_sptr self) -> io_signature_sptr"""
        return _CARES_swig.antenna_correction_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(antenna_correction_sptr self) -> io_signature_sptr"""
        return _CARES_swig.antenna_correction_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(antenna_correction_sptr self) -> long"""
        return _CARES_swig.antenna_correction_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(antenna_correction_sptr self) -> basic_block_sptr"""
        return _CARES_swig.antenna_correction_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(antenna_correction_sptr self, int ninputs, int noutputs) -> bool"""
        return _CARES_swig.antenna_correction_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(antenna_correction_sptr self) -> std::string"""
        return _CARES_swig.antenna_correction_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(antenna_correction_sptr self, std::string name)"""
        return _CARES_swig.antenna_correction_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(antenna_correction_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _CARES_swig.antenna_correction_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(antenna_correction_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.antenna_correction_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(antenna_correction_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.antenna_correction_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(antenna_correction_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _CARES_swig.antenna_correction_sptr_message_subscribers(self, which_port)

antenna_correction_sptr_swigregister = _CARES_swig.antenna_correction_sptr_swigregister
antenna_correction_sptr_swigregister(antenna_correction_sptr)


antenna_correction_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
antenna_correction = antenna_correction.make;

class calibrate_lin_array(object):
    """
    Calibrate a linear antenna array.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (number of antenna elements x 1) which can be utilized to calibrate a linear array.

    Constructor Specific Documentation:

    Make a block to calibrate linear arrays.

    Args:
        norm_spacing : Normalized spacing between antenna elements
        num_ant_ele : Number of antenna elements
        pilot_angle : Known angle of a pilot transmitter used for calibration
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(norm_spacing: 'float', num_ant_ele: 'int', pilot_angle: 'float') -> "gr::CARES::calibrate_lin_array::sptr":
        """
        make(float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr

        Calibrate a linear antenna array.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (number of antenna elements x 1) which can be utilized to calibrate a linear array.

        Constructor Specific Documentation:

        Make a block to calibrate linear arrays.

        Args:
            norm_spacing : Normalized spacing between antenna elements
            num_ant_ele : Number of antenna elements
            pilot_angle : Known angle of a pilot transmitter used for calibration
        """
        return _CARES_swig.calibrate_lin_array_make(norm_spacing, num_ant_ele, pilot_angle)

    make = staticmethod(make)
    __swig_destroy__ = _CARES_swig.delete_calibrate_lin_array
    __del__ = lambda self: None
calibrate_lin_array_swigregister = _CARES_swig.calibrate_lin_array_swigregister
calibrate_lin_array_swigregister(calibrate_lin_array)

def calibrate_lin_array_make(norm_spacing: 'float', num_ant_ele: 'int', pilot_angle: 'float') -> "gr::CARES::calibrate_lin_array::sptr":
    """
    calibrate_lin_array_make(float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr

    Calibrate a linear antenna array.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (number of antenna elements x 1) which can be utilized to calibrate a linear array.

    Constructor Specific Documentation:

    Make a block to calibrate linear arrays.

    Args:
        norm_spacing : Normalized spacing between antenna elements
        num_ant_ele : Number of antenna elements
        pilot_angle : Known angle of a pilot transmitter used for calibration
    """
    return _CARES_swig.calibrate_lin_array_make(norm_spacing, num_ant_ele, pilot_angle)

class calibrate_lin_array_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::CARES::calibrate_lin_array)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::CARES::calibrate_lin_array)> self) -> calibrate_lin_array_sptr
        __init__(boost::shared_ptr<(gr::CARES::calibrate_lin_array)> self, calibrate_lin_array p) -> calibrate_lin_array_sptr
        """
        this = _CARES_swig.new_calibrate_lin_array_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::CARES::calibrate_lin_array *":
        """__deref__(calibrate_lin_array_sptr self) -> calibrate_lin_array"""
        return _CARES_swig.calibrate_lin_array_sptr___deref__(self)

    __swig_destroy__ = _CARES_swig.delete_calibrate_lin_array_sptr
    __del__ = lambda self: None

    def make(self, norm_spacing: 'float', num_ant_ele: 'int', pilot_angle: 'float') -> "gr::CARES::calibrate_lin_array::sptr":
        """
        make(calibrate_lin_array_sptr self, float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr

        Calibrate a linear antenna array.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (number of antenna elements x 1) which can be utilized to calibrate a linear array.

        Constructor Specific Documentation:

        Make a block to calibrate linear arrays.

        Args:
            norm_spacing : Normalized spacing between antenna elements
            num_ant_ele : Number of antenna elements
            pilot_angle : Known angle of a pilot transmitter used for calibration
        """
        return _CARES_swig.calibrate_lin_array_sptr_make(self, norm_spacing, num_ant_ele, pilot_angle)


    def history(self) -> "unsigned int":
        """history(calibrate_lin_array_sptr self) -> unsigned int"""
        return _CARES_swig.calibrate_lin_array_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(calibrate_lin_array_sptr self, int which, int delay)
        declare_sample_delay(calibrate_lin_array_sptr self, unsigned int delay)
        """
        return _CARES_swig.calibrate_lin_array_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(calibrate_lin_array_sptr self, int which) -> unsigned int"""
        return _CARES_swig.calibrate_lin_array_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(calibrate_lin_array_sptr self, int multiple)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(calibrate_lin_array_sptr self) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(calibrate_lin_array_sptr self) -> double"""
        return _CARES_swig.calibrate_lin_array_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(calibrate_lin_array_sptr self) -> uint64_t"""
        return _CARES_swig.calibrate_lin_array_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(calibrate_lin_array_sptr self) -> uint64_t"""
        return _CARES_swig.calibrate_lin_array_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(calibrate_lin_array_sptr self) -> bool"""
        return _CARES_swig.calibrate_lin_array_sptr_start(self)


    def stop(self) -> "bool":
        """stop(calibrate_lin_array_sptr self) -> bool"""
        return _CARES_swig.calibrate_lin_array_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(calibrate_lin_array_sptr self, unsigned int which_input) -> uint64_t"""
        return _CARES_swig.calibrate_lin_array_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(calibrate_lin_array_sptr self, unsigned int which_output) -> uint64_t"""
        return _CARES_swig.calibrate_lin_array_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(calibrate_lin_array_sptr self, std::string level)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(calibrate_lin_array_sptr self) -> std::string"""
        return _CARES_swig.calibrate_lin_array_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(calibrate_lin_array_sptr self) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(calibrate_lin_array_sptr self, int m)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(calibrate_lin_array_sptr self)"""
        return _CARES_swig.calibrate_lin_array_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(calibrate_lin_array_sptr self) -> bool"""
        return _CARES_swig.calibrate_lin_array_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(calibrate_lin_array_sptr self, int m)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(calibrate_lin_array_sptr self) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(calibrate_lin_array_sptr self, int i) -> long"""
        return _CARES_swig.calibrate_lin_array_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(calibrate_lin_array_sptr self, long max_output_buffer)
        set_max_output_buffer(calibrate_lin_array_sptr self, int port, long max_output_buffer)
        """
        return _CARES_swig.calibrate_lin_array_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(calibrate_lin_array_sptr self, int i) -> long"""
        return _CARES_swig.calibrate_lin_array_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(calibrate_lin_array_sptr self, long min_output_buffer)
        set_min_output_buffer(calibrate_lin_array_sptr self, int port, long min_output_buffer)
        """
        return _CARES_swig.calibrate_lin_array_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_avg(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_var(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_avg(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_var(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.calibrate_lin_array_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(calibrate_lin_array_sptr self) -> float"""
        return _CARES_swig.calibrate_lin_array_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(calibrate_lin_array_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(calibrate_lin_array_sptr self)"""
        return _CARES_swig.calibrate_lin_array_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(calibrate_lin_array_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _CARES_swig.calibrate_lin_array_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(calibrate_lin_array_sptr self) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(calibrate_lin_array_sptr self) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(calibrate_lin_array_sptr self, int priority) -> int"""
        return _CARES_swig.calibrate_lin_array_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(calibrate_lin_array_sptr self) -> std::string"""
        return _CARES_swig.calibrate_lin_array_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(calibrate_lin_array_sptr self) -> std::string"""
        return _CARES_swig.calibrate_lin_array_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(calibrate_lin_array_sptr self) -> io_signature_sptr"""
        return _CARES_swig.calibrate_lin_array_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(calibrate_lin_array_sptr self) -> io_signature_sptr"""
        return _CARES_swig.calibrate_lin_array_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(calibrate_lin_array_sptr self) -> long"""
        return _CARES_swig.calibrate_lin_array_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(calibrate_lin_array_sptr self) -> basic_block_sptr"""
        return _CARES_swig.calibrate_lin_array_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(calibrate_lin_array_sptr self, int ninputs, int noutputs) -> bool"""
        return _CARES_swig.calibrate_lin_array_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(calibrate_lin_array_sptr self) -> std::string"""
        return _CARES_swig.calibrate_lin_array_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(calibrate_lin_array_sptr self, std::string name)"""
        return _CARES_swig.calibrate_lin_array_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(calibrate_lin_array_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _CARES_swig.calibrate_lin_array_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(calibrate_lin_array_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.calibrate_lin_array_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(calibrate_lin_array_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.calibrate_lin_array_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(calibrate_lin_array_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _CARES_swig.calibrate_lin_array_sptr_message_subscribers(self, which_port)

calibrate_lin_array_sptr_swigregister = _CARES_swig.calibrate_lin_array_sptr_swigregister
calibrate_lin_array_sptr_swigregister(calibrate_lin_array_sptr)


calibrate_lin_array_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
calibrate_lin_array = calibrate_lin_array.make;

class MUSIC_lin_array(object):
    """
    Performs DoA estimation using MUSIC algorithm for a linear antenna array.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (pseudo-spectrum length x 1) whose arg-max values represent the estimated DoAs.

    Constructor Specific Documentation:

    Make a block to estimate DoAs using MUSIC algorithm for linear arrays.

    Args:
        norm_spacing : Normalized spacing between antenna elements
        num_targets : Known number of targets
        num_ant_ele : Number of antenna elements
        pspectrum_len : Length of the Pseudo-Spectrum length
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(norm_spacing: 'float', num_targets: 'int', num_ant_ele: 'int', pspectrum_len: 'int') -> "gr::CARES::MUSIC_lin_array::sptr":
        """
        make(float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr

        Performs DoA estimation using MUSIC algorithm for a linear antenna array.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (pseudo-spectrum length x 1) whose arg-max values represent the estimated DoAs.

        Constructor Specific Documentation:

        Make a block to estimate DoAs using MUSIC algorithm for linear arrays.

        Args:
            norm_spacing : Normalized spacing between antenna elements
            num_targets : Known number of targets
            num_ant_ele : Number of antenna elements
            pspectrum_len : Length of the Pseudo-Spectrum length
        """
        return _CARES_swig.MUSIC_lin_array_make(norm_spacing, num_targets, num_ant_ele, pspectrum_len)

    make = staticmethod(make)
    __swig_destroy__ = _CARES_swig.delete_MUSIC_lin_array
    __del__ = lambda self: None
MUSIC_lin_array_swigregister = _CARES_swig.MUSIC_lin_array_swigregister
MUSIC_lin_array_swigregister(MUSIC_lin_array)

def MUSIC_lin_array_make(norm_spacing: 'float', num_targets: 'int', num_ant_ele: 'int', pspectrum_len: 'int') -> "gr::CARES::MUSIC_lin_array::sptr":
    """
    MUSIC_lin_array_make(float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr

    Performs DoA estimation using MUSIC algorithm for a linear antenna array.

    This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (pseudo-spectrum length x 1) whose arg-max values represent the estimated DoAs.

    Constructor Specific Documentation:

    Make a block to estimate DoAs using MUSIC algorithm for linear arrays.

    Args:
        norm_spacing : Normalized spacing between antenna elements
        num_targets : Known number of targets
        num_ant_ele : Number of antenna elements
        pspectrum_len : Length of the Pseudo-Spectrum length
    """
    return _CARES_swig.MUSIC_lin_array_make(norm_spacing, num_targets, num_ant_ele, pspectrum_len)

class MUSIC_lin_array_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::CARES::MUSIC_lin_array)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::CARES::MUSIC_lin_array)> self) -> MUSIC_lin_array_sptr
        __init__(boost::shared_ptr<(gr::CARES::MUSIC_lin_array)> self, MUSIC_lin_array p) -> MUSIC_lin_array_sptr
        """
        this = _CARES_swig.new_MUSIC_lin_array_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::CARES::MUSIC_lin_array *":
        """__deref__(MUSIC_lin_array_sptr self) -> MUSIC_lin_array"""
        return _CARES_swig.MUSIC_lin_array_sptr___deref__(self)

    __swig_destroy__ = _CARES_swig.delete_MUSIC_lin_array_sptr
    __del__ = lambda self: None

    def make(self, norm_spacing: 'float', num_targets: 'int', num_ant_ele: 'int', pspectrum_len: 'int') -> "gr::CARES::MUSIC_lin_array::sptr":
        """
        make(MUSIC_lin_array_sptr self, float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr

        Performs DoA estimation using MUSIC algorithm for a linear antenna array.

        This block takes a correlation matrix of size (number of antenna elements x number of antenna elements) as input and generates a complex vector of size (pseudo-spectrum length x 1) whose arg-max values represent the estimated DoAs.

        Constructor Specific Documentation:

        Make a block to estimate DoAs using MUSIC algorithm for linear arrays.

        Args:
            norm_spacing : Normalized spacing between antenna elements
            num_targets : Known number of targets
            num_ant_ele : Number of antenna elements
            pspectrum_len : Length of the Pseudo-Spectrum length
        """
        return _CARES_swig.MUSIC_lin_array_sptr_make(self, norm_spacing, num_targets, num_ant_ele, pspectrum_len)


    def history(self) -> "unsigned int":
        """history(MUSIC_lin_array_sptr self) -> unsigned int"""
        return _CARES_swig.MUSIC_lin_array_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(MUSIC_lin_array_sptr self, int which, int delay)
        declare_sample_delay(MUSIC_lin_array_sptr self, unsigned int delay)
        """
        return _CARES_swig.MUSIC_lin_array_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(MUSIC_lin_array_sptr self, int which) -> unsigned int"""
        return _CARES_swig.MUSIC_lin_array_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(MUSIC_lin_array_sptr self, int multiple)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(MUSIC_lin_array_sptr self) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(MUSIC_lin_array_sptr self) -> double"""
        return _CARES_swig.MUSIC_lin_array_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(MUSIC_lin_array_sptr self) -> uint64_t"""
        return _CARES_swig.MUSIC_lin_array_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(MUSIC_lin_array_sptr self) -> uint64_t"""
        return _CARES_swig.MUSIC_lin_array_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(MUSIC_lin_array_sptr self) -> bool"""
        return _CARES_swig.MUSIC_lin_array_sptr_start(self)


    def stop(self) -> "bool":
        """stop(MUSIC_lin_array_sptr self) -> bool"""
        return _CARES_swig.MUSIC_lin_array_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(MUSIC_lin_array_sptr self, unsigned int which_input) -> uint64_t"""
        return _CARES_swig.MUSIC_lin_array_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(MUSIC_lin_array_sptr self, unsigned int which_output) -> uint64_t"""
        return _CARES_swig.MUSIC_lin_array_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(MUSIC_lin_array_sptr self, std::string level)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(MUSIC_lin_array_sptr self) -> std::string"""
        return _CARES_swig.MUSIC_lin_array_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(MUSIC_lin_array_sptr self) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(MUSIC_lin_array_sptr self, int m)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(MUSIC_lin_array_sptr self)"""
        return _CARES_swig.MUSIC_lin_array_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(MUSIC_lin_array_sptr self) -> bool"""
        return _CARES_swig.MUSIC_lin_array_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(MUSIC_lin_array_sptr self, int m)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(MUSIC_lin_array_sptr self) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(MUSIC_lin_array_sptr self, int i) -> long"""
        return _CARES_swig.MUSIC_lin_array_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(MUSIC_lin_array_sptr self, long max_output_buffer)
        set_max_output_buffer(MUSIC_lin_array_sptr self, int port, long max_output_buffer)
        """
        return _CARES_swig.MUSIC_lin_array_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(MUSIC_lin_array_sptr self, int i) -> long"""
        return _CARES_swig.MUSIC_lin_array_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(MUSIC_lin_array_sptr self, long min_output_buffer)
        set_min_output_buffer(MUSIC_lin_array_sptr self, int port, long min_output_buffer)
        """
        return _CARES_swig.MUSIC_lin_array_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_avg(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_var(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_avg(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_var(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.MUSIC_lin_array_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(MUSIC_lin_array_sptr self) -> float"""
        return _CARES_swig.MUSIC_lin_array_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(MUSIC_lin_array_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(MUSIC_lin_array_sptr self)"""
        return _CARES_swig.MUSIC_lin_array_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(MUSIC_lin_array_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _CARES_swig.MUSIC_lin_array_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(MUSIC_lin_array_sptr self) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(MUSIC_lin_array_sptr self) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(MUSIC_lin_array_sptr self, int priority) -> int"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(MUSIC_lin_array_sptr self) -> std::string"""
        return _CARES_swig.MUSIC_lin_array_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(MUSIC_lin_array_sptr self) -> std::string"""
        return _CARES_swig.MUSIC_lin_array_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(MUSIC_lin_array_sptr self) -> io_signature_sptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(MUSIC_lin_array_sptr self) -> io_signature_sptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(MUSIC_lin_array_sptr self) -> long"""
        return _CARES_swig.MUSIC_lin_array_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(MUSIC_lin_array_sptr self) -> basic_block_sptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(MUSIC_lin_array_sptr self, int ninputs, int noutputs) -> bool"""
        return _CARES_swig.MUSIC_lin_array_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(MUSIC_lin_array_sptr self) -> std::string"""
        return _CARES_swig.MUSIC_lin_array_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(MUSIC_lin_array_sptr self, std::string name)"""
        return _CARES_swig.MUSIC_lin_array_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(MUSIC_lin_array_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _CARES_swig.MUSIC_lin_array_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(MUSIC_lin_array_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(MUSIC_lin_array_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(MUSIC_lin_array_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _CARES_swig.MUSIC_lin_array_sptr_message_subscribers(self, which_port)

MUSIC_lin_array_sptr_swigregister = _CARES_swig.MUSIC_lin_array_sptr_swigregister
MUSIC_lin_array_sptr_swigregister(MUSIC_lin_array_sptr)


MUSIC_lin_array_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MUSIC_lin_array = MUSIC_lin_array.make;

class correlate(object):
    """
    Calculate autocorrelation matrix of input data snapshot.

    Constructor Specific Documentation:

    Make an correlate block.

    Args:
        inputs : Number of input streams
        snapshot_size : Size of each snapshot
        overlap_size : Size of the overlap between successive snapshots
        avg_method : Use Forward Averaging or Forward-Backward Averaging
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(inputs: 'int', snapshot_size: 'int', overlap_size: 'int', avg_method: 'int') -> "gr::CARES::correlate::sptr":
        """
        make(int inputs, int snapshot_size, int overlap_size, int avg_method) -> correlate_sptr

        Calculate autocorrelation matrix of input data snapshot.

        Constructor Specific Documentation:

        Make an correlate block.

        Args:
            inputs : Number of input streams
            snapshot_size : Size of each snapshot
            overlap_size : Size of the overlap between successive snapshots
            avg_method : Use Forward Averaging or Forward-Backward Averaging
        """
        return _CARES_swig.correlate_make(inputs, snapshot_size, overlap_size, avg_method)

    make = staticmethod(make)
    __swig_destroy__ = _CARES_swig.delete_correlate
    __del__ = lambda self: None
correlate_swigregister = _CARES_swig.correlate_swigregister
correlate_swigregister(correlate)

def correlate_make(inputs: 'int', snapshot_size: 'int', overlap_size: 'int', avg_method: 'int') -> "gr::CARES::correlate::sptr":
    """
    correlate_make(int inputs, int snapshot_size, int overlap_size, int avg_method) -> correlate_sptr

    Calculate autocorrelation matrix of input data snapshot.

    Constructor Specific Documentation:

    Make an correlate block.

    Args:
        inputs : Number of input streams
        snapshot_size : Size of each snapshot
        overlap_size : Size of the overlap between successive snapshots
        avg_method : Use Forward Averaging or Forward-Backward Averaging
    """
    return _CARES_swig.correlate_make(inputs, snapshot_size, overlap_size, avg_method)

class correlate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::CARES::correlate)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::CARES::correlate)> self) -> correlate_sptr
        __init__(boost::shared_ptr<(gr::CARES::correlate)> self, correlate p) -> correlate_sptr
        """
        this = _CARES_swig.new_correlate_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self) -> "gr::CARES::correlate *":
        """__deref__(correlate_sptr self) -> correlate"""
        return _CARES_swig.correlate_sptr___deref__(self)

    __swig_destroy__ = _CARES_swig.delete_correlate_sptr
    __del__ = lambda self: None

    def make(self, inputs: 'int', snapshot_size: 'int', overlap_size: 'int', avg_method: 'int') -> "gr::CARES::correlate::sptr":
        """
        make(correlate_sptr self, int inputs, int snapshot_size, int overlap_size, int avg_method) -> correlate_sptr

        Calculate autocorrelation matrix of input data snapshot.

        Constructor Specific Documentation:

        Make an correlate block.

        Args:
            inputs : Number of input streams
            snapshot_size : Size of each snapshot
            overlap_size : Size of the overlap between successive snapshots
            avg_method : Use Forward Averaging or Forward-Backward Averaging
        """
        return _CARES_swig.correlate_sptr_make(self, inputs, snapshot_size, overlap_size, avg_method)


    def history(self) -> "unsigned int":
        """history(correlate_sptr self) -> unsigned int"""
        return _CARES_swig.correlate_sptr_history(self)


    def declare_sample_delay(self, *args) -> "void":
        """
        declare_sample_delay(correlate_sptr self, int which, int delay)
        declare_sample_delay(correlate_sptr self, unsigned int delay)
        """
        return _CARES_swig.correlate_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which: 'int') -> "unsigned int":
        """sample_delay(correlate_sptr self, int which) -> unsigned int"""
        return _CARES_swig.correlate_sptr_sample_delay(self, which)


    def set_output_multiple(self, multiple: 'int') -> "void":
        """set_output_multiple(correlate_sptr self, int multiple)"""
        return _CARES_swig.correlate_sptr_set_output_multiple(self, multiple)


    def output_multiple(self) -> "int":
        """output_multiple(correlate_sptr self) -> int"""
        return _CARES_swig.correlate_sptr_output_multiple(self)


    def relative_rate(self) -> "double":
        """relative_rate(correlate_sptr self) -> double"""
        return _CARES_swig.correlate_sptr_relative_rate(self)


    def relative_rate_i(self) -> "uint64_t":
        """relative_rate_i(correlate_sptr self) -> uint64_t"""
        return _CARES_swig.correlate_sptr_relative_rate_i(self)


    def relative_rate_d(self) -> "uint64_t":
        """relative_rate_d(correlate_sptr self) -> uint64_t"""
        return _CARES_swig.correlate_sptr_relative_rate_d(self)


    def start(self) -> "bool":
        """start(correlate_sptr self) -> bool"""
        return _CARES_swig.correlate_sptr_start(self)


    def stop(self) -> "bool":
        """stop(correlate_sptr self) -> bool"""
        return _CARES_swig.correlate_sptr_stop(self)


    def nitems_read(self, which_input: 'unsigned int') -> "uint64_t":
        """nitems_read(correlate_sptr self, unsigned int which_input) -> uint64_t"""
        return _CARES_swig.correlate_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output: 'unsigned int') -> "uint64_t":
        """nitems_written(correlate_sptr self, unsigned int which_output) -> uint64_t"""
        return _CARES_swig.correlate_sptr_nitems_written(self, which_output)


    def set_log_level(self, level: 'std::string') -> "void":
        """set_log_level(correlate_sptr self, std::string level)"""
        return _CARES_swig.correlate_sptr_set_log_level(self, level)


    def log_level(self) -> "std::string":
        """log_level(correlate_sptr self) -> std::string"""
        return _CARES_swig.correlate_sptr_log_level(self)


    def max_noutput_items(self) -> "int":
        """max_noutput_items(correlate_sptr self) -> int"""
        return _CARES_swig.correlate_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m: 'int') -> "void":
        """set_max_noutput_items(correlate_sptr self, int m)"""
        return _CARES_swig.correlate_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self) -> "void":
        """unset_max_noutput_items(correlate_sptr self)"""
        return _CARES_swig.correlate_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self) -> "bool":
        """is_set_max_noutput_items(correlate_sptr self) -> bool"""
        return _CARES_swig.correlate_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m: 'int') -> "void":
        """set_min_noutput_items(correlate_sptr self, int m)"""
        return _CARES_swig.correlate_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self) -> "int":
        """min_noutput_items(correlate_sptr self) -> int"""
        return _CARES_swig.correlate_sptr_min_noutput_items(self)


    def max_output_buffer(self, i: 'int') -> "long":
        """max_output_buffer(correlate_sptr self, int i) -> long"""
        return _CARES_swig.correlate_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args) -> "void":
        """
        set_max_output_buffer(correlate_sptr self, long max_output_buffer)
        set_max_output_buffer(correlate_sptr self, int port, long max_output_buffer)
        """
        return _CARES_swig.correlate_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i: 'int') -> "long":
        """min_output_buffer(correlate_sptr self, int i) -> long"""
        return _CARES_swig.correlate_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args) -> "void":
        """
        set_min_output_buffer(correlate_sptr self, long min_output_buffer)
        set_min_output_buffer(correlate_sptr self, int port, long min_output_buffer)
        """
        return _CARES_swig.correlate_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self) -> "float":
        """pc_noutput_items(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self) -> "float":
        """pc_noutput_items_avg(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self) -> "float":
        """pc_noutput_items_var(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self) -> "float":
        """pc_nproduced(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self) -> "float":
        """pc_nproduced_avg(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self) -> "float":
        """pc_nproduced_var(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full(correlate_sptr self, int which) -> float
        pc_input_buffers_full(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_avg(correlate_sptr self, int which) -> float
        pc_input_buffers_full_avg(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_input_buffers_full_var(correlate_sptr self, int which) -> float
        pc_input_buffers_full_var(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full(correlate_sptr self, int which) -> float
        pc_output_buffers_full(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_avg(correlate_sptr self, int which) -> float
        pc_output_buffers_full_avg(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        """
        pc_output_buffers_full_var(correlate_sptr self, int which) -> float
        pc_output_buffers_full_var(correlate_sptr self) -> pmt_vector_float
        """
        return _CARES_swig.correlate_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self) -> "float":
        """pc_work_time(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_work_time(self)


    def pc_work_time_avg(self) -> "float":
        """pc_work_time_avg(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self) -> "float":
        """pc_work_time_var(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_work_time_var(self)


    def pc_work_time_total(self) -> "float":
        """pc_work_time_total(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self) -> "float":
        """pc_throughput_avg(correlate_sptr self) -> float"""
        return _CARES_swig.correlate_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask: 'std::vector< int,std::allocator< int > > const &') -> "void":
        """set_processor_affinity(correlate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _CARES_swig.correlate_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self) -> "void":
        """unset_processor_affinity(correlate_sptr self)"""
        return _CARES_swig.correlate_sptr_unset_processor_affinity(self)


    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        """processor_affinity(correlate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _CARES_swig.correlate_sptr_processor_affinity(self)


    def active_thread_priority(self) -> "int":
        """active_thread_priority(correlate_sptr self) -> int"""
        return _CARES_swig.correlate_sptr_active_thread_priority(self)


    def thread_priority(self) -> "int":
        """thread_priority(correlate_sptr self) -> int"""
        return _CARES_swig.correlate_sptr_thread_priority(self)


    def set_thread_priority(self, priority: 'int') -> "int":
        """set_thread_priority(correlate_sptr self, int priority) -> int"""
        return _CARES_swig.correlate_sptr_set_thread_priority(self, priority)


    def name(self) -> "std::string":
        """name(correlate_sptr self) -> std::string"""
        return _CARES_swig.correlate_sptr_name(self)


    def symbol_name(self) -> "std::string":
        """symbol_name(correlate_sptr self) -> std::string"""
        return _CARES_swig.correlate_sptr_symbol_name(self)


    def input_signature(self) -> "gr::io_signature::sptr":
        """input_signature(correlate_sptr self) -> io_signature_sptr"""
        return _CARES_swig.correlate_sptr_input_signature(self)


    def output_signature(self) -> "gr::io_signature::sptr":
        """output_signature(correlate_sptr self) -> io_signature_sptr"""
        return _CARES_swig.correlate_sptr_output_signature(self)


    def unique_id(self) -> "long":
        """unique_id(correlate_sptr self) -> long"""
        return _CARES_swig.correlate_sptr_unique_id(self)


    def to_basic_block(self) -> "gr::basic_block_sptr":
        """to_basic_block(correlate_sptr self) -> basic_block_sptr"""
        return _CARES_swig.correlate_sptr_to_basic_block(self)


    def check_topology(self, ninputs: 'int', noutputs: 'int') -> "bool":
        """check_topology(correlate_sptr self, int ninputs, int noutputs) -> bool"""
        return _CARES_swig.correlate_sptr_check_topology(self, ninputs, noutputs)


    def alias(self) -> "std::string":
        """alias(correlate_sptr self) -> std::string"""
        return _CARES_swig.correlate_sptr_alias(self)


    def set_block_alias(self, name: 'std::string') -> "void":
        """set_block_alias(correlate_sptr self, std::string name)"""
        return _CARES_swig.correlate_sptr_set_block_alias(self, name)


    def _post(self, which_port: 'swig_pmt_ptr', msg: 'swig_pmt_ptr') -> "void":
        """_post(correlate_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _CARES_swig.correlate_sptr__post(self, which_port, msg)


    def message_ports_in(self) -> "pmt::pmt_t":
        """message_ports_in(correlate_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.correlate_sptr_message_ports_in(self)


    def message_ports_out(self) -> "pmt::pmt_t":
        """message_ports_out(correlate_sptr self) -> swig_pmt_ptr"""
        return _CARES_swig.correlate_sptr_message_ports_out(self)


    def message_subscribers(self, which_port: 'swig_pmt_ptr') -> "pmt::pmt_t":
        """message_subscribers(correlate_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _CARES_swig.correlate_sptr_message_subscribers(self, which_port)

correlate_sptr_swigregister = _CARES_swig.correlate_sptr_swigregister
correlate_sptr_swigregister(correlate_sptr)


correlate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
correlate = correlate.make;



